pipeline {
    agent {
        label "Agent-1"
    }
    options {
        timeout(time: 20, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'Action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }
    stages {
        stage('Terraform Init') {
            steps {
                script {
                    withAWS(region: 'us-east-1', credentials: 'terraform-aws-credentials') {
                        sh """
                        cd 10-vpc
                        terraform init -reconfigure
                        """
                    }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                script {
                    withAWS(region: 'us-east-1', credentials: 'terraform-aws-credentials') {
                        sh """
                        cd 10-vpc
                        terraform plan -out=tfplan
                        """
                    }
                }
            }
        }
        stage('Terraform Apply') {
            steps {
                script {
                    when (params.Action == 'apply') {
                        withAWS(region: 'us-east-1', credentials: 'terraform-aws-credentials') {
                            sh """
                            cd 10-vpc
                            terraform apply "tfplan"
                            """
                        }
                    } else if (params.Action == 'destroy') {
                        withAWS(region: 'us-east-1', credentials: 'terraform-aws-credentials') {
                            sh """
                            cd 10-vpc
                            terraform destroy -auto-approve
                            """
                        }
                    }
                }
            }
        }
        stage('Triggering next Job of 20-sg') {
            when {
                expression { params.Action == 'apply' }
            }
            steps {
                build job: '20-sg', parameters: [string(name: 'Action', value: 'apply')], wait: false
            }
        }
    }
    post {
        always {
            echo "This is post section, it will run every time the pipeline is triggered"
            deleteDir()  // This will clean the directory once the pipeline is completed.
        }
        success {
            echo "This is success section, it will run when the pipeline is successful"
        }
        failure {
            echo "This is failure section, it will run when the pipeline fails"
        }
    }
}